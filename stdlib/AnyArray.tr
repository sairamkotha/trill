type AnyArray {
  var elements: *Any
  var count: Int
  var capacity: Int
  init(capacity: Int) {
    assert(capacity > 0, "Cannot initialize an array with 0 capacity")
    self.elements = calloc(capacity, sizeof(Any)) as *Any
    self.capacity = capacity
    self.count = 0
  }
  init() {
    self.elements = calloc(20, sizeof(Any)) as *Any
    self.capacity = 20
    self.count = 0
  }
  mutating func _growIfNeeded() {
    if self._load() > 0.75 {
      self.capacity = (self.capacity as Double * 1.5) as Int
      self._reallocate()
    }
  }
  mutating func _shrinkIfNeeded() {
    if self._load() < 0.5 {
      self.capacity = (self.capacity as Double / 1.5) as Int
      self._reallocate()
    }
  }
  mutating func _reallocate() {
    self.elements = realloc(self.elements as *Void, self.capacity * sizeof(Any)) as *Any
  }
  func _load() -> Double {
    return self.count as Double / self.capacity as Double
  }
  func _boundsCheck(_ index: Int) {
    if index < 0 || index > self.count {
      fatalError("index \(index) out of bounds \(0)..\(self.count)")
    }
  }

  /// Reserves a new capacity value for this array, and forces reallocation.
  /// - parameter capacity: The new capacity.
  /// - note: This new capacity must be greater or equal to the current capacity
  mutating func _reserveCapacity(_ capacity: Int) {
    assert(capacity >= self.capacity, "cannot reserve smaller capacity")
    self.capacity = capacity;
    self._reallocate()
  }

  mutating func append(contentsOf array: AnyArray) {
    self._reserveCapacity(self.capacity + array.count)
    for var i = 0; i < array.count; i += 1 {
      self.append(array[i])
    }
  }
  mutating func append(_ element: Any) {
    assert(self.count < self.capacity, "cannot append when at capacity")
    self.elements[self.count] = element
    self.count += 1
    self._growIfNeeded()
  }
  mutating func insert(_ element: Any, at index: Int) {
    self._boundsCheck(index)
    self.count += 1
    self._growIfNeeded()
    memmove(&self.elements[index + 1] as *Void, &self.elements[index] as *Void, sizeof(Any) as UInt)
    self.elements[index] = element
  }
  mutating func remove(at index: Int) -> Any {
    self._boundsCheck(index)
    self._shrinkIfNeeded()
    self.count -= 1
    memmove(&self.elements[index] as *Void, &self.elements[index + 1] as *Void, sizeof(Any) as UInt)
    return self.elements[self.count + 1]
  }
  subscript(_ index: Int) -> Any {
    self._boundsCheck(index)
    return self.elements[index]
  }
  mutating func set(_ element: Any, at index: Int) {
    self._boundsCheck(index)
    self.elements[index] = element
  }
  func dump() {
    putchar('[' as Int32)
    for var i = 0; i < self.count; i += 1 {
      let elem = self.elements[i]
      print(elem)
      if i != self.count - 1 {
        printf(", ")
      }
    }
    putchar(']' as Int32)
  }

  var description: String {
    var s = ""
    s.append('[' as Int8)
    for var i = 0; i < self.count; i += 1 {
      let elem = self.elements[i]
      s.append(String(describing: elem))
      if i != self.count - 1 {
        s.append(", ")
      }
    }
    s.append(']' as Int8)
    return s
  }

  func isEmpty() -> Bool {
    return self.count == 0
  }
  func destroy() {
    free(self.elements as *Void)
  }
  func map(_ f: (Any) -> Any) -> AnyArray {
    var new = AnyArray(capacity: self.capacity)
    for var i = 0; i < self.count; i += 1 {
      new.append(f(self[i]))
    }
    return new
  }
}
