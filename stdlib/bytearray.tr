func assert(_ condition: Bool, _ message: String) {
  if !condition {
    fatalError(message)
  }
}

indirect type ByteArray {
  var bytes: *Int8
  var length: Int
  var capacity: Int
  init(capacity: Int) {
    assert(capacity > 0, "Cannot initialize an array with 0 capacity")
    self.capacity = capacity
    self.bytes = calloc(capacity, sizeof(Int8)) as *Int8
    self.length = 0
  }

  init(_ string: *Int8) {
    var length = strlen(string)
    self.capacity = ((length + 1) as Double * 1.5) as Int
    self.bytes = calloc(self.capacity, sizeof(Int8)) as *Int8
    self.length = length as Int
    strncpy(self.bytes, string, length as UInt)
  }

  init(_ string: *Int8, length: Int) {
    self.capacity = ((length + 1) as Double * 1.5) as Int
    self.bytes = calloc(self.capacity, sizeof(Int8)) as *Int8
    self.length = length
    strncpy(self.bytes, string, length as UInt)
  }

  mutating func _growIfNeeded() {
    if self._load > 0.75 {
      self.capacity *= 2
      self.bytes = realloc(self.bytes as *Void, self.capacity * sizeof(Int8)) as *Int8
    }
  }
  mutating func _shrinkIfNeeded() {
    if self._load < 0.5 {
      self.capacity /= 2
      self.bytes = realloc(self.bytes as *Void, self.capacity * sizeof(Int8)) as *Int8
    }
  }
  mutating func _reserveCapacity(_ capacity: Int) {
    if self.capacity >= capacity { return }
    self.capacity = capacity
    self.bytes = realloc(self.bytes as *Void, self.capacity * sizeof(Int8)) as *Int8
  }
  func _boundsCheck(_ index: Int) {
    if index <= self.length && index >= 0 { return }
    fatalError("index \(index) out of bounds 0..\(self.length)")
  }
  mutating func append(_ element: Int8) {
    let index = self.length
    self.length += 1
    self._growIfNeeded()
    self.bytes[index] = element
  }
  mutating func append(_ string: *Int8) {
    self.insert(string, at: self.length)
  }
  mutating func append(_ array: ByteArray) {
    self.insert(array.bytes, length: array.length, at: self.length)
  }
  mutating func insert(_ string: *Int8, at index: Int) {
    self.insert(string, length: strlen(string) as Int, at: index)
  }
  mutating func insert(_ string: *Int8, length: Int, at index: Int) {
    let length = length
    var index = index
    self._boundsCheck(index)
    self.length += length
    self._growIfNeeded()

    // "foo" -> insert "bar" at 0
    // "   foo" -> move foo to new location (0 + 3 = 3)
    // "barfoo" -> copy bar into space

    // "foo" -> insert "bar" at 1
    // "f   oo" -> move "oo" to new location (1 + 3 = 4)
    // "fbaroo" -> copy bar into space
    memmove(&self.bytes[index + length] as *Void,
            &self.bytes[index] as *Void,
            (self.length - index) as UInt)
    strncpy(&self.bytes[index], string, length as UInt)
  }
  mutating func insert(_ element: Int8, at index: Int) {
    self.insert(&element, length: 1, at: index)
  }
  mutating func insert(_ array: ByteArray, at index: Int) {
    self.insert(array.bytes, length: array.length, at: index)
  }
  mutating func remove(at index: Int) {
    self._boundsCheck(index)
    self._shrinkIfNeeded()
    self.length -= 1

    memmove(&self.bytes[index] as *Void,
            &self.bytes[index + 1] as *Void,
            (self.length - index) as UInt)
    self.bytes[self.length] = 0
  }
  subscript(_ index: Int) -> Int8 {
    self._boundsCheck(index)
    return self.bytes[index]
  }
  mutating func set(_ element: Int8, at index: Int) {
    self._boundsCheck(index)
    self.bytes[index] = element
  }
  var _load: Double {
    return self.length as Double / self.capacity as Double
  }
  func copy() -> ByteArray {
    return ByteArray(self.bytes, length: self.length)
  }
  func dump() {
    printf("capacity: %d, length: %d (load %f)\n", self.capacity, self.length, self._load)
    putchar('[' as Int32)
    for var i = 0; i < self.length; i += 1 {
      printf("0x%x", self.bytes[i] as Int)
      if i != self.length - 1 {
        printf(", ")
      }
    }
    puts("]" as *Int8)
  }
  func slice(from start: Int, to end: Int) -> ByteArray {
    assert(end >= start, "invalid slice bounds")
    let newLength = end - start
    return ByteArray(&self.bytes[start], length: newLength)
  }
  var isEmpty: Bool {
    return self.length == 0
  }
  func mergeSorted() -> ByteArray {
    if self.length == 1 { return self }
    let middle = self.length / 2
    let left = self.slice(from: 0, to: middle)
    let right = self.slice(from: middle, to: self.length)
    let sortedLeft = left.mergeSorted()
    let sortedRight = right.mergeSorted()
    return left.merging(right)
  }
  func merging(_ other: ByteArray) -> ByteArray {
    var selfCursor = 0
    var otherCursor = 0
    var result = ByteArray(capacity: self.length + other.length)
    while selfCursor < self.length && otherCursor < other.length {
      if selfCursor >= self.length {
        result.append(other[otherCursor])
        otherCursor += 1
        continue
      }
      if otherCursor >= self.length {
        result.append(self[selfCursor])
        selfCursor += 1
        continue
      }
      let selfVal = self[selfCursor]
      let otherVal = other[otherCursor]
      if selfVal < otherVal {
        result.append(selfVal)
        selfCursor += 1
      } else {
        result.append(otherVal)
        otherCursor += 1
      }
    }
    return result
  }
  deinit {
    free(self.bytes as *Void)
  }
}
