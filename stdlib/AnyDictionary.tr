indirect type _AnyDictionaryBucket {
  let key: String
  let value: Any
}

type AnyDictionary {
  var storage: *_AnyDictionaryBucket
  var capacity: Int
  var count: Int

  init(capacity: Int) {
    assert(capacity > 0, "Cannot initialize a dictionary with 0 capacity")
    self.storage = calloc(capacity, sizeof(Any)) as *_AnyDictionaryBucket
    self.capacity = capacity
    self.count = 0
  }
  init() {
    let capacity = 20
    self.storage = calloc(capacity, sizeof(Any)) as *_AnyDictionaryBucket
    self.capacity = capacity
    self.count = 0
  }

  func _load() -> Double {
    return (self.count as Double) / (self.capacity as Double)
  }

  mutating func _growIfNeeded() {
    if self._load() < 0.75 {
      return
    }
    let oldCap = self.capacity
    self.capacity *= 2
    self._rehash(oldCapacity: oldCap)
  }

  mutating func _shrinkIfNeeded() {
    if self._load() > 0.5 {
      return
    }
    let oldCap = self.capacity
    self.capacity /= 2
    self._rehash(oldCapacity: oldCap)
  }

  mutating func insert(_ bucket: _AnyDictionaryBucket) {
    self._growIfNeeded()
    let hash = bucket.key.hash
    var index = hash % self.capacity
    while self.storage[index] != nil {
      index += 1
      if index >= self.capacity {
        index = 0
      }
    }
    self.count += 1
    self.storage[index] = bucket
  }

  mutating func insert(_ value: Any, forKey key: String) {
    self.insert(_AnyDictionaryBucket(key: key, value: value))
  }

  mutating func insert(_ value: Any, forKey key: *Int8) {
    self.insert(_AnyDictionaryBucket(key: String(cString: key), value: value))
  }

  func contains(_ key: String) -> Bool {
    return self._findBucket(key) != nil
  }

  func _findBucket(_ key: String) -> _AnyDictionaryBucket {
    var index = key.hash
    while self.storage[index] != nil {
      if self.storage[index].key == key {
        return self.storage[index]
      }
      index += 1
      if index >= self.capacity {
        index = 0
      }
    }
    return nil
  }

  subscript(_ key: *Int8) -> Any {
    return self[String(cString: key)]
  }

  subscript(_ key: String) -> Any {
    let bucket = self._findBucket(key)
    if bucket == nil {
      return nil
    } else {
      return bucket.value
    }
  }

  mutating func _rehash(oldCapacity: Int) {
    var oldStorage = self.storage
    self.storage = calloc(self.capacity, sizeof(Any)) as *_AnyDictionaryBucket
    for var i = 0; i < oldCapacity; i += 1 {
      let bucket = self.storage[i]
      if bucket == nil { continue }
      self.insert(bucket)
    }
  }

  func dump() {
    let count = self.count
    let capacity = self.capacity
    if count == 0 { print("{}"); return }
    print("{")
    var seen = 0
    for var i = 0; i < capacity; i += 1 {
      let bucket = self.storage[i]
      if bucket != nil {
        seen += 1
        print(bucket.key)
        print(": ")
        print(bucket.value)
        if seen < count {
          print(", ")
        }
      }
    }
    print("}")
  }

  var description: String {
    let count = self.count
    if count == 0 { return "{}" }
    let capacity = self.capacity
    var s = "{"
    var seen = 0
    for var i = 0; i < capacity; i += 1 {
      let bucket = self.storage[i]
      if bucket != nil {
        seen += 1
        s.append(String(describing: bucket.key))
        s.append(": ")
        s.append(String(describing: bucket.value))
        if seen < count {
          s.append(", ")
        }
      }
    }
    s.append("}")
    return s
  }
}
