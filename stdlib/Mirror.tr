type MetaType = *Void
type FieldMetadata = *Void

type Mirror {
  let _metadata: MetaType
  let value: Any

  init(reflecting value: Any) {
    self._metadata = typeOf(value)
    self.value = value
  }

  init(reflectingType typeMeta: *Void) {
    self._metadata = typeMeta
  }

  var typeName: *Int8 {
    return trill_getTypeName(self._metadata)
  }

  var sizeInBits: Int {
    return trill_getTypeSizeInBits(self._metadata) as Int
  }

  var pointerLevel: Int {
    return trill_getTypePointerLevel(self._metadata) as Int
  }

  var isReferenceType: Bool {
    return trill_isReferenceType(self._metadata) != 0
  }

  var fieldCount: Int {
    return trill_getTypeFieldCount(self._metadata) as Int
  }

  func child(_ index: Int) -> Any {
    return trill_extractAnyField(self.value, index as UInt)
  }

  func set(value: Any, forChild index: Int) {
    trill_updateAny(self.value, index as UInt, value)
  }

  func set(value: Any, forKey name: *Int8) {
    for var i = 0; i < self.fieldCount; i += 1 {
      if strcmp(self.field(at: i).name, name) == 0 {
        self.set(value: value, forChild: i)
        return
      }
    }
    trill_fatalError("could not set value for unknown child")
  }

  func print() {
    if (self._metadata == nil) {
      puts("Metadata is null!\n");
      return;
    }
    printf("Metadata for type %s (size: %d):\n", self.typeName, self.sizeInBits);
    for var i = 0; i < self.fieldCount; i += 1 {
      let field = self.field(at: i)
      printf("â”” ")
      let name = field.name
      printf("(offset %d) ", field.offset)
      if name != nil {
        printf("%s: ", name)
      }
      printf("%s\n", field.typeMetadata.typeName);

      // println(self.child(i))
    }
  }

  func print(to file: *FILE) {
    if trill_anyIsNil(self.value) != 0 {
      fprintf(file, "nil")
      return
    }
    if self.pointerLevel > 0 {
      fprintf(file, "%p as %s",
              *(trill_getAnyValuePtr(self.value) as **Void),
              self.typeName)
      return
    }
    fprintf(file, "%s(", self.typeName)
    for var i = 0; i < self.fieldCount; i += 1 {
      let field = self.field(at: i)
      if i != 0 { fprintf(file, ", ") }
      let name = field.name
      if name == nil { // tuple
        fprintf(file, ".%d: ", i)
      } else {
        fprintf(file, "%s: ", name)
      }
      let child = self.child(i)
      var shouldQuote = child is *Int8 || child is String
      if shouldQuote { print("\"") }
      print(child)
      if shouldQuote { print("\"") }
    }
    fprintf(file, ")", self.value)
  }

  func describe() -> String {
    if trill_anyIsNil(self.value) != 0 {
      return "nil"
    }
    if self.pointerLevel > 0 {
      //*(trill_getAnyValuePtr(self.value) as **Void)
      return "\(nil) as \(self.typeName)"
    }
    var s = "\(self.typeName)("
    for var i = 0; i < self.fieldCount; i += 1 {
      let field = self.field(at: i)
      if i != 0 { s.append(", ") }
      let name = field.name
      if name == nil { // tuple
        s.append(".\(i): ")
      } else {
        s.append("\(name): ")
      }
      let child = self.child(i)
      var shouldQuote = child is *Int8 || child is String
      if shouldQuote { s.append("\"") }
      s.append(String(describing: child))
      if shouldQuote { s.append("\"") }
    }
    s.append(")")
    return s
  }

  func field(at index: Int) -> FieldMirror {
    return FieldMirror(reflecting: trill_getFieldMetadata(self._metadata, index as UInt))
  }
}

type FieldMirror {
  let _metadata: FieldMetadata
  init(reflecting field: FieldMetadata) {
    self._metadata = field
  }
  var name: *Int8 {
    return trill_getFieldName(self._metadata)
  }
  var typeMetadata: Mirror {
    return Mirror(reflectingType: trill_getFieldType(self._metadata))
  }
  var offset: Int {
    return trill_getFieldOffset(self._metadata)
  }
}
