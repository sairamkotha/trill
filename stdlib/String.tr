type String {
    // Underlying storage for String.
    // - note: MUST always end in a NUL terminator.
    var _storage: ByteArray
    init(cString: *Int8) {
        self._storage = ByteArray(cString)
        self._storage.append(0)
    }
    init(_global cString: *Int8, length: Int) {
        // TODO: make this not call into a ByteArray initializer
        // that immediately allocates a new buffer -- it should be
        // CoW
        self._storage = ByteArray(cString, length: length)
        self._storage.append(0)
    }
    /// Creates a string by repeating a character for a certain length.
    /// - parameter count: The number of times to repeat the character.
    init(repeating string: String, count: Int) {
        self._storage = ByteArray(capacity: (string.length * count) + 1)
        for var i = 0; i < count; i += 1 {
            self._storage.insert(string.cString,
                                 length: string.length,
                                 at: self._storage.length)
        }
        self._storage.append(0)
    }
    init(_interpolationSegments segments: AnyArray) {
      self._storage = ByteArray(capacity: 256)
      self._storage.append(0)
      for var i = 0; i < segments.count; i+= 1 {
        let segmentString = String(describing: segments[i])
        self.append(segmentString)
      }
    }
    init() {
        self._storage = ByteArray(capacity: 256)
        self._storage.append(0)
    }
    var length: Int {
        return self._storage.length - 1
    }
    var cString: *Int8 {
        return self._storage.bytes
    }
    mutating func append(_ char: Int8) {
        self._storage.remove(at: self.length) // Remove NUL terminator
        self._storage.append(char)
        self._storage.append(0)
    }
    mutating func append(_ string: String) {
        self._storage.remove(at: self.length) // Remove NUL terminator
        self._storage.append(string._storage)
        // explicitly do not append 0, as the other string's storage already
        // has the NUL terminator
    }
    mutating func append(_ cString: *Int8) {
        self._storage.remove(at: self.length) // Remove NUL terminator
        self._storage.append(cString)
        self._storage.append(0)
    }
    mutating func append(_ cString: *Int8, length: Int) {
        self._storage.remove(at: self.length) // Remove NUL terminator
        self._storage.insert(cString, length: length, at: self.length)
        self._storage.append(0)
    }
    mutating func insert(_ cString: *Int8, length: Int, at index: Int) {
        let isEnd = index == self.length
        if isEnd {
            self._storage.remove(at: self.length) // Remove NUL terminator
        }
        self._storage.insert(cString, length: length, at: index)
        if isEnd {
            self._storage.append(0)
        }
    }
    mutating func insert(_ char: Int8, at index: Int) {
        self.insert(&char, length: 1, at: index)
    }
    mutating func insert(_ cString: *Int8, at index: Int) {
        self.insert(cString, length: strlen(cString) as Int, at: index)
    }
    mutating func insert(_ string: String, at index: Int) {
        self.insert(string.cString, length: string.length, at: index)
    }
    mutating func remove(at index: Int) {
        self._storage.remove(at: index)
    }
    func copy() -> String {
        return String(_storage: self._storage.copy())
    }
    func reversed() -> String {
        var storage = ByteArray(capacity: self.length + 1)
        for var i = self.length - 1; i >= 0; i -= 1 {
            storage.append(self[i])
        }
        storage.append(0)
        return String(_storage: storage)
    }
    subscript(_ index: Int) -> Int8 {
        return self._storage[index]
    }
    var hash: Int {
        // A very simple implementation of djb2
        var hash = 5381
        for var i = 0; i < self.length; i += 1 {
            hash = (hash * 33) ^ self._storage.bytes[i] as Int
        }
        return hash
    }
    func hasPrefix(_ string: String) -> Bool {
        if self.length < string.length { return false }
        for var i = 0; i < string.length; i += 1 {
            if self[i] != string[i] { return false }
        }
        return true
    }
    func hasSuffix(_ string: String) -> Bool {
        let lengthDifference = self.length - string.length
        if lengthDifference < 0 { return false }
        for var i = string.length - 1; i >= 0; i -= 1 {
            if self[lengthDifference + i] != string[i] { return false }
        }
        return true
    }
    func substring(from start: Int, to end: Int) -> String {
      return String(_storage: self._storage.slice(from: start, to: end))
    }
    func substring(to end: Int) -> String {
      return self.substring(from: 0, to: end)
    }
    func substring(from start: Int) -> String {
      return self.substring(from: start, to: self.length + 1 /* index of NUL terminator */)
    }
    var isEmpty: Bool {
        return self.length == 0
    }



    // TODO: Rewrite once we have generics -- the snprintf stuff is super
    // repetitive
    init(describing value: Any) {
      if value is *Int8 {
        let capacity = snprintf(nil, 0, "%s", value as *Int8) as Int + 1
        self._storage = ByteArray(capacity: capacity)
        snprintf(self._storage.bytes, capacity as UInt, "%s" as *Int8, value as *Int8)
        self._storage.length = capacity
      } else if value is Int {
        let capacity = snprintf(nil, 0, "%d" as *Int8, value as Int) as Int + 1
        self._storage = ByteArray(capacity: capacity)
        snprintf(self._storage.bytes, capacity as UInt, "%d" as *Int8, value as Int)
        self._storage.length = capacity
      } else if value is Int8 {
        fatalError("unimplemented")
      } else if value is Int16 {
        fatalError("unimplemented")
      } else if value is Int32 {
        fatalError("unimplemented")
      } else if value is UInt {
        fatalError("unimplemented")
      } else if value is UInt8 {
        fatalError("unimplemented")
      } else if value is UInt16 {
        fatalError("unimplemented")
      } else if value is UInt32 {
        fatalError("unimplemented")
      } else if value is Bool {
        if value as Bool {
          self = "true"
        } else {
          self = "false"
        }
      } else if value is *Void {
        let capacity = snprintf(nil, 0, "%p" as *Int8, value as *Void) as Int + 1
        self._storage = ByteArray(capacity: capacity)
        snprintf(self._storage.bytes, capacity as UInt, "%p" as *Int8, value as *Void)
        self._storage.length = capacity
      } else if value is String {
        self._storage = (value as String)._storage.copy()
      } else if value is AnyDictionary {
        self = (value as AnyDictionary).description
      } else if value is AnyArray {
        self = (value as AnyArray).description
      } else {
        self = Mirror(reflecting: value).describe()
      }
    }
}

func ==(lhs: String, rhs: String) -> Bool {
  if lhs.length != rhs.length { return false }
  return strncmp(lhs._storage.bytes, rhs._storage.bytes, lhs.length as UInt) == 0
}

func !=(lhs: String, rhs: String) -> Bool {
  return !(lhs == rhs)
}

func +(lhs: String, rhs: String) -> String {
  var copy = lhs.copy()
  copy.append(rhs)
  return copy
}

func fatalError(_ message: String) {
  trill_fatalError(message.cString)
}
